package io.github.landgrafhomyak.classh

import java.io.PrintStream

class GeneratorOptions {
    var usePragmaOnce = false
    var includeGuardName: String? = null
    var verbose = true

    fun withIncludeGuard(m: String): GeneratorOptions {
        val n = GeneratorOptions()
        n.usePragmaOnce = this.usePragmaOnce
        n.includeGuardName = m
        n.verbose = this.verbose
        return n
    }

    fun withIncludeGuardDefault(m: String): GeneratorOptions =
        if (this.includeGuardName != null) this
        else this.withIncludeGuard(m)
}

fun PrintStream.printlnIfVerbose(options: GeneratorOptions, lazyString: () -> String) {
    if (options.verbose)
        this.println(lazyString())
}

fun generateHeader(options: GeneratorOptions, methods: Iterable<JniMethodHead>, output: PrintStream) {
    output.printlnIfVerbose(options) { "/* DO NOT EDIT THIS FILE - it is machine generated */" }
    output.println("#include <jni.h>")
    if (options.usePragmaOnce) {
        output.println("#pragma once")
    } else {
        output.println("#ifndef ${options.includeGuardName!!}")
        output.println("#define ${options.includeGuardName!!}")
    }
    output.println("#ifdef __cplusplus")
    output.println("extern \"C\" {")
    output.println("#endif")
    output.println()
    for (m in methods) {
        if (options.verbose) {
            output.println("/*")
            output.println(" * Class: ${m.classQualname}")
            output.println(" * Method name: ${m.methodName}")
            output.println(" * Method signature: ${m.signature}")
            output.println(" */")
        }
        output.println("JNIEXPORT ${m.returnType.cType} JNICALL")
        output.println(m.jniName)
        if (m.argsTypes.isEmpty()) {
            output.println("(JNIEnv *, ${if (m.isStatic) JniType.CLASS.cType else JniType.OBJECT.cType});")
        } else {
            output.println(
                m.argsTypes
                    .joinToString(
                        prefix = "(JNIEnv *, ${if (m.isStatic) JniType.CLASS.cType else JniType.OBJECT.cType}, ",
                        separator = ", ",
                        postfix = ");"
                    ) { t -> t.cType }
            )
        }
        output.println()
    }
    output.println("#ifdef __cplusplus")
    output.println("}")
    output.println("#endif")
    output.println("#endif")
}